name: 构建和发布Docker镜像

on:
  push:
    branches:
      - master
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
      - main
  workflow_dispatch:

env:
  REGISTRY_GITHUB: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  IMAGE_NAME: zhihu-clone-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GITHUB }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 登录到Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GITHUB }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_DOCKERHUB }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=知乎克隆后端API
            org.opencontainers.image.description=一个仿知乎风格的现代论坛系统后端API
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: 构建和推送Docker镜像
        uses: docker/build-push-action@v5
        with:
          context: ./forum-server
          file: ./forum-server/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: 生成镜像摘要
        if: github.event_name != 'pull_request'
        run: echo ${{ steps.build.outputs.digest }}

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行Trivy漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_GITHUB }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 上传Trivy扫描结果到GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 部署到测试环境
        run: |
          echo "部署到测试环境..."
          echo "镜像: ${{ env.REGISTRY_GITHUB }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
          # 这里可以添加实际的部署脚本
          # 例如：kubectl apply -f k8s/ 或者 docker-compose up -d

  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 创建GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 新版本发布

            ### Docker镜像
            ```bash
            # GitHub Container Registry
            docker pull ${{ env.REGISTRY_GITHUB }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            
            # Docker Hub
            docker pull ${{ env.REGISTRY_DOCKERHUB }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```

            ### 快速启动
            ```bash
            # 克隆仓库
            git clone https://github.com/${{ github.repository }}.git
            cd ZhiHuClone/forum-server
            
            # 启动服务
            docker-compose up -d
            ```

            ### 更新内容
            请查看提交历史了解详细更改。

          draft: false
          prerelease: false 